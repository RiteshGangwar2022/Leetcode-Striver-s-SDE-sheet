
vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
       vector<vector<int>>ans;

       if(root==NULL){
           return ans;
       }
        vector<int>inorder,preorder,postorder;
        stack<pair<BinaryTreeNode*,int>>s;
        s.push({root,1});
        while(s.size()){

              auto it=s.top();
              s.pop();

              if(it.second==1){
                    
                    preoder.push_back(it.first->data);
                    it.second++;
                    s.push({it.first,it.second});
                    if(it.first->left){
                       
                         s.push({it.first,1});
              
                    }
              }
              else if(it.second==2){
                  inorder.push_back({it.first->val});
                  it.second++;
                  s.push(it);
                  if(it.first->right){
                    
                     s.push({it.first,1});
              
                  }
              }
              else(it.second==3){
                  postorder.push_back(it.first-val);
              }
        }
        ans[0].push_back(inorder);
        ans[1].push_back(preorder);
        ans[2].push_back(postorder);
        return ans;

}
