#include<iostream>
using namespace std;
template<class T>
class node{
    public:
    T data;
    node<T>*next;
    node(T data){
        next=NULL;
        this->data=data;
    }
};
template<class T>
class stack{
    node<T>*head;
    int size;
    public:
    stack(){
         size=0;
         head=NULL;
    }
    void push(T num){
         
            node<T>*newnode=new node<T>(num);
            newnode->next=head;
            head=newnode;
            size++;
    
    }
    T pop(){
        if(isempty()){
            return 0;
        }
        T ans=head->data;
        node<T>*temp=head;
        head=head->next;
        delete temp;
        size--;
        return ans;
    }
    int sizes(){
        if(isempty()){
            return 0;
        }
        return size;
    }
    bool isempty(){
        if(size==0){
            return true;
        }
        else{
            return false;
        }
    }
    T top(){
        if(isempty()){
            return 0;
        }
        return head->data;
    }
};
int main(){
    stack<int>s;
    s.push(10);
    s.push(20);
    s.push(30);
    s.push(40);
    cout<<s.pop()<<endl;
    cout<<s.pop()<<endl;
    cout<<s.top()<<endl;
    cout<<s.isempty()<<endl;
    cout<<s.sizes()<<endl;
    return 0;
}
