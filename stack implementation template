#include<iostream>
using namespace std;
template<class T>
class stack{
     T *data;
     int index;
     int capacity;
     public:
     stack(){
        data=new T[5];
        index=0;
        capacity=5;
     }
  //to insert element in stack
    void push(int ele){
        if(index==capacity){
            T* newdata=new T[2*capacity]; //for dynamic increase in size
            capacity*=2;
            for(int i=0;i<capacity;i++){
                newdata[i]=data[i];
            }
            delete []data;
            data=newdata;
        }
        data[index]=ele;
        index++;
    }
    // check length
    int size(){
        if(isempty()){
            return 0;
        }
        return index;
    }
    //to check empty
    bool isempty(){
        if(index==0){
            return true;
        }
        else{
            return false;
        }
    }
    //to delete element
    T pop(){
        if(isempty()){
            cout<<"stack is empty "<<endl;
            return -1;
        }
        index--;
        return data[index];
    }
    //to check top element
    T top(){
        if(isempty()){
            cout<<"stack is empty "<<endl;
            return -1;
        }
        return data[index-1];
    }
};
int main(){
    stack<int> s;
    s.push(10);
    s.push(20);
    s.push(30);
    s.push(40);
    s.push(50);
    s.push(60);
    cout<<s.pop()<<endl;
    cout<<s.pop()<<endl;
    cout<<s.pop()<<endl;
    cout<<s.pop()<<endl;
    cout<<s.pop()<<endl;
    cout<<s.top()<<endl;
    cout<<s.isempty()<<endl;
    cout<<s.size()<<endl;
    return 0;
}
